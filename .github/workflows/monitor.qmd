---
title: "Monitoring Dashboard"
format: html
execute:
  echo: false
---

```{r}
# Load required libraries
library(jsonlite)
library(dplyr)
library(ggplot2)

...
permissions:
  contents: write     # Add permission to write to repository
...

...
# Set up Quarto
- name: Set up Quarto
  uses: quarto-dev/quarto-actions/setup@v2

# Render Quarto Project
- name: Render Quarto Project
  run: quarto render
...

# Load data
results_json_path <- "../../docs/data/results.json" # Path relative to the QMD file

if (!file.exists(results_json_path)) {
  cat("Error: `data/results.json` not found at `", results_json_path, "`. Please ensure the monitor script has run successfully and the path is correct relative to the Quarto document.\n")
  data <- data.frame() # Create an empty data frame
} else {
  data <- tryCatch(
    jsonlite::fromJSON(results_json_path),
    error = function(e) {
      cat(paste("Error loading `data/results.json`:", e$message, "\n"))
      return(data.frame()) # Return empty data frame on error
    }
  )
}

if (nrow(data) == 0) {
  cat("`data/results.json` is empty or could not be loaded. No summary or sparklines to display.\n")
} else {
  cat("## Status Summary Table\n\n")
  # Prepare success/failure table
  # Assuming 'status' column has "Up" or "Down"
  summary_table <- data %>%
    group_by(resource) %>%
    summarize(
      success_rate = mean(status == "Up", na.rm = TRUE) * 100,
      last_status = last(status),
      last_checked = last(timestamp)
    ) %>%
    ungroup() # Ungroup for cleaner printing

  # Display the summary table using knitr::kable for better formatting
  print(knitr::kable(summary_table, caption = "Resource Monitoring Summary", col.names = c("Resource", "Success Rate (%)", "Last Status", "Last Checked (UTC)")))
  cat("\n\n") # Add some space

  cat("## Individual Host Status Sparklines\n\n")

  unique_resources <- unique(data$resource)

  if (length(unique_resources) > 0) {
    for (res_name in unique_resources) {
      cat(paste0("### ", res_name, "\n\n")) # Sub-header for each resource
      
      # Sanitize resource name for the image file to match Python's sanitization
      # Python: "".join(c if c.isalnum() or c == '-' else '_' for c in resource_name)
      # R: gsub keeps alphanumeric and hyphen, replaces others with _
      sanitized_res_name <- gsub("[^[:alnum:]-]", "_", res_name)
      
      # Path relative to the QMD file in .github/workflows/
      image_path <- paste0("../../docs/sparkline_", sanitized_res_name, ".png") 
      
      if (file.exists(image_path)) {
        # Using print with knitr::include_graphics to ensure it renders in a loop
        print(knitr::include_graphics(image_path))
      } else {
        cat(paste0("Sparkline image not found for **", res_name, "**.\nExpected at: `", image_path, "`\n\n"))
      }
      cat("\n\n") # Add some space after each sparkline or message
    }
  } else {
    cat("No resource data found in `data/results.json` to display sparklines.\n")
  }
}
